// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.SerialPort;
import edu.wpi.first.wpilibj.Spark;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.geometry.Pose2d;
import edu.wpi.first.wpilibj.geometry.Rotation2d;
import edu.wpi.first.wpilibj.kinematics.DifferentialDriveKinematics;
import edu.wpi.first.wpilibj.kinematics.DifferentialDriveOdometry;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.simulation.EncoderSim;
import edu.wpi.first.wpilibj.util.Units;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drive extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private Spark sLeft;
    private Spark sRight;
    private Encoder eLeft;
    private Encoder eRight;
    private EncoderSim s_eLeft;
    private EncoderSim s_eRight;
    private DifferentialDrive robotDriveGroup;

    private Pose2d m_pose;

    private AHRS gyro = new AHRS(SerialPort.Port.kUSB);
    public final DifferentialDriveKinematics driveKinematics = new DifferentialDriveKinematics(Units.inchesToMeters(21.5));
    private DifferentialDriveOdometry driveOdometry = new DifferentialDriveOdometry(getGyroHeading(), new Pose2d(0.0, 0.0, getGyroHeading()));

    private NetworkTableEntry leftEncoderDistance = Shuffleboard.getTab("Drive")
        .add("Left Encoder Distance", 0.0).getEntry();
    private NetworkTableEntry rightEncoderDistance = Shuffleboard.getTab("Drive")
        .add("Left Encoder Distance", 0.0).getEntry();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Drive() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        sLeft = new Spark(0);
        addChild("Left",sLeft);
        sLeft.setInverted(false);

        sRight = new Spark(1);
        addChild("Right",sRight);
        sRight.setInverted(false);

        eLeft = new Encoder(
            Constants.DriveConstants.kEncoderLeft[0],
            Constants.DriveConstants.kEncoderLeft[1],
            Constants.DriveConstants.kEncoderLeft[2]);
        eLeft.setDistancePerPulse(Constants.DriveConstants.distancePerPulse);

        eRight = new Encoder(
            Constants.DriveConstants.kEncoderRight[0],
            Constants.DriveConstants.kEncoderRight[1],
            Constants.DriveConstants.kEncoderRight[2]);
        eRight.setDistancePerPulse(Constants.DriveConstants.distancePerPulse);
        eRight.setReverseDirection(true);

        s_eLeft = new EncoderSim(eLeft);
        s_eRight = new EncoderSim(eRight);

        robotDriveGroup = new DifferentialDrive(sLeft, sRight);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    public void simpleTank(double left, double right) {
        robotDriveGroup.tankDrive(left, right);
    }

    public void simpleArcade(double forward, double rotation) {
        robotDriveGroup.arcadeDrive(forward,rotation);
	}


    public Rotation2d getGyroHeading() {
        return gyro.getRotation2d();
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        leftEncoderDistance.setNumber(eLeft.getDistance());
        rightEncoderDistance.setNumber(eRight.getDistance());

        m_pose = driveOdometry.update(getGyroHeading(),eLeft.getDistance(), eRight.getDistance());

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

