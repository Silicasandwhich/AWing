// RobotBuilder Version: 3.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot;

import edu.wpi.first.networktables.EntryListenerFlags;
import edu.wpi.first.networktables.NetworkTableEntry;
import edu.wpi.first.networktables.NetworkTableInstance;
import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.XboxController.Button;
import edu.wpi.first.wpilibj.shuffleboard.Shuffleboard;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.CommandScheduler;
import edu.wpi.first.wpilibj2.command.WaitCommand;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.commands.*;
import frc.robot.subsystems.*;
import frc.robot.subsystems.Camera.Camera;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a "declarative" paradigm, very little robot logic should
 * actually be handled in the {@link Robot} periodic methods (other than the
 * scheduler calls). Instead, the structure of the robot (including subsystems,
 * commands, and button mappings) should be declared here.
 */
public class RobotContainer {

    private static RobotContainer m_robotContainer = new RobotContainer();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // The robot's subsystems
    private final Drive m_drive = new Drive();
    private final Intake m_intake = new Intake();
    private final Camera m_camera = new Camera();

    // Joysticks
    private GenericHID rightStick;
    private GenericHID leftStick;

    private JoystickButton intakeButton;
    private JoystickButton outtakeButton;

    // A chooser for autonomous commands
    SendableChooser<Command> m_autoChooser = new SendableChooser<>();
    SendableChooser<String> m_controlChooser = new SendableChooser<String>();

    private Command m_teleop = new TeleopCommand(m_drive);

    /**
     * The container for the robot. Contains subsystems, OI devices, and commands.
     */

    private RobotContainer() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
        // Smartdashboard Subsystems
        Shuffleboard.getTab("Drive").add(m_drive);

        // SmartDashboard Buttons
        Shuffleboard.getTab("Autonomous").add("Autonomous Command", new AutonomousCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD

        // Configure autonomous sendable chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        m_autoChooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

        m_controlChooser.setDefaultOption("Joysticks", "joysticks");
        m_controlChooser.addOption("Xbox Controller", "xbox");

        NetworkTableEntry entry = NetworkTableInstance.getDefault().getTable("Shuffleboard/Teleop/Input Option").getEntry("active");
        entry.addListener( event -> {
            setControls(event.getEntry().getString("joysticks"));
        }, EntryListenerFlags.kUpdate | EntryListenerFlags.kNew);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        Shuffleboard.getTab("Teleop").add("Input Option", m_controlChooser);

        Shuffleboard.getTab("Auto").add(m_autoChooser);
        setControls(m_controlChooser.getSelected());

        // Configure the button bindings
        configureButtonBindings();

        // Configure default commands
        m_camera.setDefaultCommand(new WaitCommand(2).andThen(new StartCameraCommand(m_camera)));
    }

    private void setControls(String value) {
        System.out.println("Switching controls to: "+value);
        if (value.equals("Joysticks")) {
                    
            rightStick = new Joystick(1);
            leftStick = new Joystick(0);
            intakeButton = new JoystickButton(rightStick, 1);
            outtakeButton = new JoystickButton(leftStick, 1);
        
        } else {

            XboxController controller = new XboxController(4);
            leftStick = controller;
            intakeButton = new JoystickButton(leftStick, Button.kBumperRight.value);
            outtakeButton = new JoystickButton(leftStick, Button.kBumperLeft.value);

        }
    }

    public static RobotContainer getInstance() {
        return m_robotContainer;
    }

    /**
     * Use this method to define your button->command mappings. Buttons can be
     * created by instantiating a {@link GenericHID} or one of its subclasses
     * ({@link edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then
     * passing it to a {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
     */
    private void configureButtonBindings() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
        // Create some buttons

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
        
        intakeButton.whileHeld(new RunIntake(m_intake,false));
        outtakeButton.whileHeld(new RunIntake(m_intake,true));

    }

    /**
     * Use this to pass the autonomous command to the main {@link Robot} class.
     *
     * @return the command to run in autonomous
     */
    public Command getAutonomousCommand() {
        // The selected command will be run in autonomous
        return m_autoChooser.getSelected();
    }

    public String getDriveOption() {
        return m_controlChooser.getSelected();
    }

    public void startTeleop() {
        CommandScheduler.getInstance().schedule(m_teleop);
    }

    public double[] getSticks() {
        double sticks[] = new double[2];
        
        if(m_controlChooser.getSelected().equals("joysticks")) {
            sticks[0] = leftStick.getY();
            sticks[1] = rightStick.getY();
        } else {
            sticks[0] = leftStick.getY(Hand.kLeft);
            sticks[1] = leftStick.getY(Hand.kRight);
        }

        return sticks;
    }
}
